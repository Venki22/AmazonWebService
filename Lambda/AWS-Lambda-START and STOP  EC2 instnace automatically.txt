Ref url:
https://www.bing.com/videos/search?q=schedular+in+cloudwatch+with+lamda+stop+and+start+EC2+instance&&view=detail&mid=A51CF88F1AB4F4659EC0A51CF88F1AB4F4659EC0&&FORM=VRDGAR&ru=%2Fvideos%2Fsearch%3Fq%3Dschedular%2Bin%2Bcloudwatch%2Bwith%2Blamda%2Bstop%2Band%2Bstart%2BEC2%2Binstance%26FORM%3DHDRSC3

https://www.youtube.com/watch?v=93K29VPt0nQ&list=PLwCFQqHE6M98BoonWUSxzfpznuifz-BOZ&index=1
----------------------------------------------------------------------------------------------------------------
How to STOP ans START AWS EC2 instnace automatically
using IAM, Lamda with Amazon EventBridge (schduler)
----------------------------------------------------------------------------------------------------------------


Lambda 
------
Lambda is used for automation
Lambda is Serverless
Lambda is invoked based on the triggers

Automated version of EC2
No worries about the underlying Architecture
For executing background tasks

AWS Lambda as a 'serverless' compute service, meaning the developer,dont have to worry about which AWS resources to launch,o r how will they manage tehm,they just put the code on lambda and its runs.it's that simple! Althrough, Lambda can only be used to execute background tasks.


----------------------------------------------------------------------------------------------------------------
1.Create a EC2 Instnace
2.Create IAM Role (Lamda) and Policy (EC2)
	2.1. IAM Role (Lambda)
		CloudWatchLogsFullAccess
	2.2  Policy (EC2)
		DescribeInstances (List)
		StopInstance (Write)
		StartInstance
Now will add policy to IAM Role lambda
3. Create Lambda function Stop and Start
	3.1: Auto Stop
	     Now, I will add tag Stop and Value 'yes' for EC2 instance
	3.2: Auto Start
	     Next, create function AutoStart add tag start value 'yes' for EC2 instance

4. Create Amazon EventBridge Rule Schduler
	4.1: Create schedulr for auto stop & test
	     Current, Time Zone is of AWS with GMT
	     Will convert local time to GMT
	4.2  Create Schduler for auto start & test
		
5. Check Log group in CloudWatch

start.py
========
import json
import boto3

# Enter the region your instances are in. Include only the region without specifying Availability Zone; e.g., 'us-east-1'
region = 'us-east-1'

def lambda_handler(event, context):
    ec2 = boto3.client('ec2', region_name=region)

    # Enter tag name of Start
    filter = [{'Name': 'tag:Start', 'Values': ['yes']}]

    instances = ec2.describe_instances(Filters=filter)

    #ec2.start_instances(InstanceIds=instances)

    # Get instance ID
    instancesid = instances.get('Reservations')[0].get('Instances')[0].get('InstanceId')
    start_instances = []
    start_instances.append(instancesid)

    # Start instance
    ec2.start_instances(InstanceIds=start_instances)
    print('Instances Started ' + str(instancesid))



Stop.py
=======
import json
import boto3

# Enter the region your instances are in. Include only the region without specifying Availability Zone; e.g., 'us-east-1'
region = 'us-east-1'

def lambda_handler(event, context):
    ec2 = boto3.client('ec2', region_name=region)

	# Enter tag name of Stop
    filter = [{'Name': 'tag:Stop', 'Values': ['yes']}]

    instances = ec2.describe_instances(Filters=filter)

    #ec2.stop_instances(InstanceIds=instances)

    # Get instance ID
    instancesid = instances.get('Reservations')[0].get('Instances')[0].get('InstanceId')
    stop_instances = []
    stop_instances.append(instancesid)

    # Stop instance
    ec2.stop_instances(InstanceIds=stop_instances)
    print('Instances Stopped ' + str(instancesid))



